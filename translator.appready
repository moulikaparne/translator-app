import tkinter as tk
from tkinter import ttk, messagebox
from deep_translator import GoogleTranslator
from gtts import gTTS
import pyperclip
import pygame
import threading
import os
import uuid

# --- Initialize pygame mixer ---
try:
    pygame.mixer.init()
    print("Pygame mixer initialized successfully âœ…")
except Exception as e:
    print("âš  Pygame mixer init failed:", e)

# --- Supported languages for gTTS ---
LANGUAGES = {
    "English": "en",
    "Hindi": "hi",
    "Telugu": "te",
    "Tamil": "ta",
    "Kannada": "kn",
    "Malayalam": "ml",
    "French": "fr",
    "German": "de",
    "Spanish": "es",
    "Italian": "it",
    "Japanese": "ja",
    "Arabic": "ar"
    # âš  Note: gTTS doesnâ€™t support "zh-CN" (Chinese) properly
}

# --- Functions ---

def translate_text():
    text = input_text.get("1.0", tk.END).strip()
    target_name = lang_var.get()
    target_code = LANGUAGES.get(target_name, "en")

    if not text:
        messagebox.showwarning("Input required", "Please enter text to translate.")
        return

    try:
        translated = GoogleTranslator(source='auto', target=target_code).translate(text)
        output_text.delete("1.0", tk.END)
        output_text.insert(tk.END, translated)
        detected_label.config(text="Detected Language: (auto)")
    except Exception as e:
        messagebox.showerror("Translation error", str(e))


def _play_audio_file(filepath):
    """Play audio safely in background."""
    try:
        print("ðŸ”Š Playing audio:", filepath)
        pygame.mixer.music.load(filepath)
        pygame.mixer.music.play()

        while pygame.mixer.music.get_busy():
            pygame.time.wait(100)

        print("âœ… Finished playing audio")
    except Exception as e:
        print("âš  Audio play error:", e)


def speak_text():
    """Convert text to speech and play."""
    text = output_text.get("1.0", tk.END).strip()
    if not text:
        messagebox.showwarning("Nothing to speak", "Please translate some text first.")
        return

    target_name = lang_var.get()
    target_code = LANGUAGES.get(target_name, "en")

    try:
        # Save TTS output
        filename = f"output_{uuid.uuid4().hex}.mp3"
        filepath = os.path.join(os.getcwd(), filename)

        tts = gTTS(text=text, lang=target_code)
        tts.save(filepath)
        print("âœ… Saved TTS file:", filepath)

        # Play audio in a thread
        t = threading.Thread(target=_play_audio_file, args=(filepath,), daemon=True)
        t.start()
    except Exception as e:
        messagebox.showerror("TTS error", str(e))
        print("âš  TTS error:", e)


def copy_text():
    text = output_text.get("1.0", tk.END).strip()
    if not text:
        messagebox.showwarning("Empty", "No translated text to copy.")
        return
    pyperclip.copy(text)
    messagebox.showinfo("Copied", "Translated text copied to clipboard.")


def clear_text():
    input_text.delete("1.0", tk.END)
    output_text.delete("1.0", tk.END)
    detected_label.config(text="Detected Language: None")


# --- UI Setup ---
root = tk.Tk()
root.title("Translator App")
root.geometry("480x620")
root.configure(bg="white")

tk.Label(root, text="Enter text:", bg="white", font=("Arial", 11, "bold")).pack(pady=(10,0))
input_text = tk.Text(root, height=6, width=55)
input_text.pack(pady=6)

tk.Label(root, text="Choose target language:", bg="white", font=("Arial", 11, "bold")).pack()
lang_var = tk.StringVar()
lang_dropdown = ttk.Combobox(root, textvariable=lang_var, values=list(LANGUAGES.keys()), state="readonly")
lang_dropdown.current(0)
lang_dropdown.pack(pady=6, ipadx=5)

# Buttons frame
btn_frame = tk.Frame(root, bg="white")
btn_frame.pack(pady=8)

translate_btn = tk.Button(btn_frame, text="Translate", width=12, command=translate_text, bg="#b8f2b8")
translate_btn.grid(row=0, column=0, padx=6, pady=4)

speak_btn = tk.Button(btn_frame, text="Speak", width=12, command=speak_text, bg="#ffdf9f")
speak_btn.grid(row=0, column=1, padx=6, pady=4)

copy_btn = tk.Button(btn_frame, text="Copy", width=12, command=copy_text, bg="#cfe8ff")
copy_btn.grid(row=0, column=2, padx=6, pady=4)

clear_btn = tk.Button(btn_frame, text="Clear", width=12, command=clear_text, bg="#ffb3b3")
clear_btn.grid(row=0, column=3, padx=6, pady=4)

detected_label = tk.Label(root, text="Detected Language: None", bg="white", fg="blue", font=("Arial", 10, "italic"))
detected_label.pack(pady=(4,10))

tk.Label(root, text="Translated text:", bg="white", font=("Arial", 11, "bold")).pack()
output_text = tk.Text(root, height=8, width=55)
output_text.pack(pady=8)

root.mainloop()




